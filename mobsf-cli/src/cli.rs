use clap::{App, AppSettings, Arg, ArgMatches};
use crate::{AUTHOR, NAME, VERSION};

pub fn cli() -> ArgMatches {
    let matches = App::new(NAME)
        .about("mobsf-cli app")
        .version(VERSION)
        .setting(AppSettings::SubcommandRequiredElseHelp)
        .author(AUTHOR)
        .arg(Arg::new("api_key")
            .short('a')
            .help("Api key/token (overrides MOBSF_API_KEY env)")
            .required(false)
            .takes_value(true)
            .global(true)
        )
        .arg(Arg::new("server")
            .short('s')
            .help("Server, example: http://localhost:8000 (overrides MOBSF_SERVER env)")
            .required(false)
            .takes_value(true)
            .global(true)
        )
        .subcommand(
            App::new("upload")
                .about("Upload a file.")
                .arg(Arg::new("file_path")
                    // .name("File path")
                    .required(true)
                    .index(1)
                    .takes_value(true))
        )
        .subcommand(
            App::new("scan")
                .about("Scan a file.")
                .arg(Arg::new("scan_type")
                    .possible_values(["xapk", "apk", "zip", "ipa", "appx"])
                    .required(true)
                    .index(1)
                    .takes_value(true))
                .arg(Arg::new("file_name")
                    .help("File name")
                    .required(true)
                    .index(2)
                    .takes_value(true))
                .arg(Arg::new("file_hash")
                    .required(true)
                    .index(3)
                    .takes_value(true))
                .arg(Arg::new("re_scan")
                    .short('r')
                    .help("Rescan a file")
                    .required(false)
                    .takes_value(false)
                )
        )
        .subcommand(
            App::new("scans")
                .about("Display recent scans.")
        )
        .subcommand(
            App::new("report")
                .about("Get report.")
                .subcommand(
                    App::new("pdf")
                        .about("Pdf report format")
                        .arg(Arg::new("file_hash")
                            .required(true)
                            .index(1)
                            .takes_value(true))
                        .arg(Arg::new("output_file_path")
                            .short('o')
                            .help("File path to save a report")
                            .required(false)
                            .default_value("report.pdf")
                        )
                )
                .subcommand(
                    App::new("json")
                        .about("JSON report format")
                        .arg(Arg::new("file_hash")
                            .required(true)
                            .index(1)
                            .takes_value(true))
                        .arg(Arg::new("output_file_path")
                            .short('o')
                            .help("File path to save a report")
                            .required(false)
                            .default_value("report.json")
                        )
                        .arg(Arg::new("stdout_output")
                            .short('p')
                            .help("Print to stdout instead of saving a file")
                            .required(false)
                            .takes_value(false)
                        )
                )
        )
        .subcommand(
            App::new("delete")
                .about("Delete scan.")
                .arg(Arg::new("file_hash")
                    .required(true)
                    .index(1)
                    .takes_value(true))
        ).
        subcommand(
            App::new("play")
                .about("Upload a file and auto start scan.")
                .arg(Arg::new("file_path")
                    .required(true)
                    .index(1)
                    .takes_value(true))
                .arg(Arg::new("re_scan")
                    .short('r')
                    .help("Rescan a file")
                    .required(false)
                    .takes_value(false)
                )
        )
        .subcommand(
            App::new("ci")
                .about("For CI/CD stages. Upload a file, auto start scan, save reports, check scores.")
                .arg(Arg::new("file_path")
                    .required(true)
                    .index(1)
                    .takes_value(true))
                .arg(Arg::new("re_scan")
                    .short('r')
                    .help("Rescan a file")
                    .required(false)
                    .takes_value(false)
                )
                .arg(Arg::new("path_to_save")
                    .short('p')
                    .help("Path to directory to save reports (pdf and json).")
                    .required(true)
                    .takes_value(true)
                )
                .arg(Arg::new("cvss")
                    .short('c')
                    .help("Above this score rise a cvss error. 0.0-10.0")
                    .default_value("3.9")
                    .takes_value(true)
                ).
                arg(Arg::new("trackers")
                    .short('t')
                    .help("Above this score rise a trackers error. 0-407")
                    .default_value("0")
                    .takes_value(true)
                )
                .arg(Arg::new("security")
                    .short('u')
                    .help("Below this score rise a security error. 0-100")
                    .default_value("71")
                    .takes_value(true)
                )
        )
        .subcommand(
            App::new("source")
                .about("View source files.")
                .arg(Arg::new("scan_type")
                    .possible_values(["apk", "ipa", "studio", "eclipse", "ios"])
                    .required(true)
                    .index(1)
                    .takes_value(true))
                .arg(Arg::new("file_path")
                    .help("Relative file path")
                    .required(true)
                    .index(2)
                    .takes_value(true))
                .arg(Arg::new("file_hash")
                    .required(true)
                    .index(3)
                    .takes_value(true))
        )
        .get_matches();

    matches
}